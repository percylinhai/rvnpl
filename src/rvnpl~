#!/usr/bin/python
#RV-NPL
from argparse import ArgumentParser, ArgumentTypeError, RawDescriptionHelpFormatter, SUPPRESS
import platform
from RVNPL import NAME,VERSION
from SEQLinkage import HOMEPAGE
from SEQLinkage.Utils import env, getColumn
from SEQLinkage.Core import main
import RVNPL.npl
import os

#################
class Args:
    def __init__(self):
	self.parser = ArgumentParser(
	prog='rvnpl',
	formatter_class=RawDescriptionHelpFormatter,
        description = '''\t{}, NPL scoring functions to detect over sharing in families with complex diseases using sequence data\n\t[{}]'''.\
        format(NAME, VERSION),
	epilog = '''\tCopyright (c)''')
	self.subparsers = self.parser.add_subparsers(title='subcommands')
	self.getSEQLArguments(self.parser)
	self.getNPLArguments(self.parser)
	self.getQTLArguments(self.parser)

    def get(self):
	return self.parser.parse_args()


    def getSEQLArguments(self, parser):
	parser_seqlink=self.subparsers.add_parser('collapse', help='''Apply Collapsed Haplotype Pattern for pedigrees''')
	self.getEncoderArguments(parser_seqlink)
        self.getIOArguments(parser_seqlink)
        #self.getLinkageArguments(parser_seqlink)
        self.getRuntimeArguments(parser_seqlink)
	parser_seqlink.set_defaults(func=main)

    def isalnum(self, string):
        if not os.path.basename(string).isalnum():
            raise ArgumentTypeError("Illegal path name [%]: must be alphanumerical string." % string)
        return string

    def getEncoderArguments(self, parser):
        vargs = parser.add_argument_group('Collapsed haplotype pattern method arguments')
        vargs.add_argument('--bin', metavar = "FLOAT", default = 0.8, type = float,
                           help='''Defines theme to collapse variants. Set to 0 for "complete collapsing",
        1 for "no collapsing", r2 value between 0 and 1 for "LD based collapsing" and other integer values for customized
        collapsing bin sizes. Default to 0.8 (variants having r2 >= 0.8 will be collapsed).''')
        vargs.add_argument('-b', '--blueprint', metavar = 'FILE',
                           help='''Blueprint file that defines regional marker
        (format: "chr startpos endpos name avg.distance male.distance female.distance").''')
        vargs.add_argument('--single-markers', action='store_true', dest = "single_markers",
                           help='''Use single variant markers. This switch will overwrite
        "--bin" and "--blueprint" arguments.''')

    def getIOArguments(self, parser):
        vargs = parser.add_argument_group('Input / output options')
        vargs.add_argument('--fam', metavar='FILE', required=True, dest = "tfam",
                           help='''Input pedigree and phenotype information in FAM format.''')
        vargs.add_argument('--vcf', metavar='FILE', required=True, help='''Input VCF file, bgzipped.''')
        vargs.add_argument('--prephased', action='store_true', help=SUPPRESS)
        vargs.add_argument('--freq', metavar='INFO', help='''Info field name for allele frequency in VCF file.''')
        vargs.add_argument('--freq_by_fam', metavar='FILE', help='''Per family info field name for allele frequency in VCF file.''')
        vargs.add_argument('--mle', action='store_true', help='''Estimate allele frequency from sample''')
        vargs.add_argument('--rvhaplo', action='store_true', help='''Only using rare variants for haplotyping''')
        vargs.add_argument('--recomb_max', metavar='INT', default = 1, type = int, help='''Maximum recombination events allowed per region.''')
        vargs.add_argument('--rsq', metavar='R', default=0.0,type=float, help=SUPPRESS)
        vargs.add_argument('-c', '--maf-cutoff', metavar='P', type=float, dest = "maf_cutoff",
                           help='''MAF cutoff to define "common" variants to be excluded from analyses.''')
        vargs.add_argument('--include_vars', metavar='FILE', help='''Variants to be included in CHP construction''')
        vargs.add_argument('--chrom-prefix', metavar='STRING', dest = 'chr_prefix',
                           help='''Prefix to chromosome name in VCF file if applicable, e.g. "chr".''')
        vargs.add_argument('-o', '--output', metavar='Name', type = self.isalnum,
                           help='''Output name prefix.''')
        vargs.add_argument('-f', '--format', metavar = 'FORMAT', nargs='+', default=['MERLIN'],
                           help=SUPPRESS)



    def getRuntimeArguments(self, parser):
        vargs = parser.add_argument_group('Runtime arguments')
        #vargs.add_argument("-h", "--help", action="help", help="Show help message and exit.")
        vargs.add_argument('-j', '--jobs', metavar='N', type = int, default = 2,
                           help='''Number of CPUs to use.''')
        vargs.add_argument('--tempdir', metavar='PATH',
                           help='''Temporary directory to use.''')
        vargs.add_argument('--cache', action='store_false', dest = 'vanilla',
                           help='''Load cache data for analysis instead of starting afresh.''')
        vargs.add_argument('-q', '--quiet', action='store_true', help='Disable the display of runtime MESSAGE.')
        vargs.add_argument('--debug', action='store_true', help=SUPPRESS)
        vargs.add_argument('--no-save', action='store_true', dest='no_save', help=SUPPRESS)

    def getLinkageArguments(self, parser):
        vargs = parser.add_argument_group('LINKAGE options')
        vargs.add_argument('-K', '--prevalence', metavar='FLOAT', type=float,
                           help='Disease prevalence.')
        vargs.add_argument('--moi', metavar='STRING', dest = "inherit_mode",
                           # choices=['AD', 'AR', 'Xlinked', 'Y'],
                           choices=['AD', 'AR'],
                           help='Mode of inheritance, AD/AR: autosomal dominant/recessive.')
        vargs.add_argument('-W', '--wt-pen', metavar='FLOAT', type=float, dest = "wild_pen",
                           help='Penetrance for wild type.')
        vargs.add_argument('-M', '--mut-pen', metavar='FLOAT', type=float, dest = "muta_pen",
                           help='Penetrance for mutation.')
        vargs.add_argument('--theta-max', metavar='FLOAT', type=float, dest = "theta_max", default = 0.5,
                           help='Theta upper bound. Default to 0.5.')
        vargs.add_argument('--theta-inc', metavar='FLOAT', type=float, dest = "theta_inc", default = 0.05,
                           help='Theta increment. Default to 0.05.')
        if ((platform.system() == 'Linux' or platform.system() == 'Darwin') and platform.architecture()[0] == '64bit'):
            vargs.add_argument('--run-linkage', action='store_true', dest = "run_linkage",
                           help='''Perform Linkage analysis using FASTLINK program.''')
            vargs.add_argument('--output-entries', metavar='N', type=int, dest = "output_limit", default = 10,
                           help='Write the highest N LOD/HLOD scores to output tables. Default to 10.')

    def getNPLArguments(self,parser):
	parser_npl = self.subparsers.add_parser('npl',help='''Apply NPL methods for pedigrees''')
        self.NPLgetMarkerArguments(parser_npl)
        self.NPLgetIOArguments(parser_npl)
        self.NPLgetRuntimeArguments(parser_npl)
	parser_npl.set_defaults(func=RVNPL.npl.execute)

    def NPLgetMarkerArguments(self,parser):
	vargs = parser.add_argument_group('Options for doing analysis on CHP markers(default) or SNV markers')
	vargs.add_argument('--snv', action='store_true',help = 'Calculate on SNV markers')
    
    def NPLgetRuntimeArguments(self,parser):
	vargs = parser.add_argument_group('Options for calculating p-values')
	vargs.add_argument('--exact',action='store_true',help="get the exact distribution of Z-score and calculate p value from it")
	vargs.add_argument('--cut','-c',metavar='FLOAT',default=0.05,type=float,help = 'threshold for adaptive permutations')
	vargs.add_argument('--rep',metavar='N',default=1000000,type=int,help = 'times of permutations')
	vargs.add_argument('--fam_rep',metavar='N',default=50000,type=int,help = 'times of permutations for each family')   
	vargs.add_argument('--force',action='store_true',help = 'keep permutation times unchanged')
	vargs.add_argument('--perfect_max',metavar='N',default=500000,type=int,help = 'maximum for inheritance vector iterations')
	vargs.add_argument('--info_only',action='store_true',help="include only informative families")
	vargs.add_argument('--perfect',action='store_true',help="use perfect data approximation in calculating Z-score")
	vargs.add_argument('--kc',action='store_true',help="use Kong&Cox(1997) extension for analytical p-values")
	vargs.add_argument('--sall',action='store_true',help="enable calculation of NPL-all")
	vargs.add_argument('--rvibd',action='store_true',help="calculate IBD for RV only")
 
    def NPLgetIOArguments(self,parser):
	vargs = parser.add_argument_group('Input/Output options')
	vargs.add_argument('--path',metavar='PATH',required=True, help = "Path for input pedigree information.")
	vargs.add_argument('--output',metavar='PATH',help = "Path for output files")
	vargs.add_argument('--n_jobs',metavar='N',default=2,type=int,help = 'number of multiprocess')


    def getQTLArguments(self,parser):
	parser_qtl = self.subparsers.add_parser('npqtl',help='''Apply RV-NPQTL methods for pedigrees''')
        self.QTLgetMarkerArguments(parser_qtl)
        self.QTLgetIOArguments(parser_qtl)
        self.QTLgetRuntimeArguments(parser_qtl)
	parser_qtl.set_defaults(func=RVNPL.qtl.execute)

    def QTLgetMarkerArguments(self,parser):
	vargs = parser.add_argument_group('Options for doing analysis on CHP markers(default) or SNV markers')
	vargs.add_argument('--snv', action='store_true',help = 'Calculate on SNV markers')
    
    def QTLgetRuntimeArguments(self,parser):
	vargs = parser.add_argument_group('Options for calculating p-values')
	vargs.add_argument('--exact',action='store_true',help="get the exact distribution of Z-score and calculate p value from it")
	vargs.add_argument('--cut','-c',metavar='FLOAT',default=0.05,type=float,help = 'threshold for adaptive permutations')
	vargs.add_argument('--rep',metavar='N',default=1000000,type=int,help = 'times of permutations')
	vargs.add_argument('--fam_rep',metavar='N',default=50000,type=int,help = 'times of permutations for each family')   
	vargs.add_argument('--force',action='store_true',help = 'keep permutation times unchanged')
	vargs.add_argument('--perfect_max',metavar='N',default=500000,type=int,help = 'maximum for inheritance vector iterations')
	vargs.add_argument('--info_only',action='store_true',help="include only informative families")
	vargs.add_argument('--perfect',action='store_true',help="use perfect data approximation in calculating Z-score")
	vargs.add_argument('--rvibd',action='store_true',help="calculate IBD for RV only")
 
    def QTLgetIOArguments(self,parser):
	vargs = parser.add_argument_group('Input/Output options')
	vargs.add_argument('--path',metavar='PATH',required=True, help = "Path for input pedigree information.")
	vargs.add_argument('--output',metavar='PATH',help = "Path for output files")
	vargs.add_argument('--n_jobs',metavar='N',default=2,type=int,help = 'number of multiprocess')

if __name__ == '__main__':
    try:
        args = Args().get()
        args.func(args)
    except Exception as e:
        raise
        env.error("{}".format(e))
